# This is a basic workflow to help you get started with Actions

name: CI

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  build:
    # We want to build for Windows
    runs-on: windows-latest

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v2

      # Install MSYS2, which is used to compile SNAPHU for Windows
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true  # Update all of MSYS2's packages
          install: "gcc make"  # Install make and gcc into MSYS2

      # Python is needed to run the script that downloads the source, and generates the release notes
      - name: Setup  Python
        uses: actions/setup-python@v2

      # The -U argument will update a package if it is already installed
      # First make sure pip is up to date
      # Why other packages are included:
      # Wheel makes installing dependencies eaiser/faster for python
      # Requests is used to download SNAPHU files, and to get the current tags in this repo (No clue how to do it in yaml)
      # packaging is used to compare version numbers so that we only build SNAPHU if a new version is installed
      - name: Install python requirements
        run: |
          python -m pip install -U pip
          python -m pip install -U wheel
          python -m pip install -U requests packaging

      # Download SNAPHU source code if a new version is available.
      # Also set GitHub Actions output variables, for user in later steps
      - name: Get source
        id: getsrc
        run: python .github/workflows/get_src.py

      - name: Build SNAPHU
        if: steps.getsrc.outputs.newVersion == 'True'
        shell: msys2 {0}
        run: |
          cd ./snaphu/src
          make -j


      # Second build, this time enabling the AVX2 SIMD instructions
      - name: Build SNAPHU with AVX2
        if: steps.getsrc.outcome.newVersion == 'True'
        shell: msys2 {0}
        run: |
          cd ./snaphu/src
          make clean
          make OPTIMFLAGS="-O3 -mavx2" BINDIR="../bin_avx" -j

        # Without this step, SNAPHU would not run on a computer without MSYS2 installed
      - name: Copy msys2.dll to binary directories
        if: steps.getsrc.outputs.newVersion == 'True'
        shell: msys2 {0}
        run: |
          cp /usr/bin/msys-2.0.dll ./snaphu/bin
          cp /usr/bin/msys-2.0.dll ./snaphu/bin_avx


      - name: Zip SNAPHU with compiled exe
        if: steps.getsrc.outputs.newVersion == 'True'
        run: |
          Compress-Archive snaphu ${{ steps.getsrc.outputs.zipName }}

      - name: Create Release
        if: steps.getsrc.outputs.newVersion == 'True'
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.getsrc.outputs.version }}
          release_name: SNAPHU ${{ steps.getsrc.outputs.version }}
          body: ${{ steps.getsrc.outputs.notes }}
          draft: false
          prerelease: false

      - name: Upload program to releases
        if: steps.getsrc.outputs.newVersion == 'True'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.getsrc.outputs.zipName }}
          asset_name: ${{ steps.getsrc.outputs.zipName }}
          asset_content_type: application/zip
